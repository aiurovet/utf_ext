import 'dart:typed_data';

import 'package:utf_ext/utf_ext.dart';

/// UTF test data
///
class Utf {
  /// Empty bytes
  ///
  static final bytesEmpty = Uint8List.fromList(<int>[]);

  /// Bytes for UTF-8
  ///
  static final bytesUtf8 = Uint8List.fromList(<int>[
    0xEF,
    0xBB,
    0xBF,
    0x41,
    0x62,
    0x63,
    0xD0,
    0x90,
    0xD0,
    0xB1,
    0xD0,
    0xB2,
    0xD0,
    0xB3,
    0xE1,
    0x83,
    0x85,
    0xD5,
    0xB6,
    0xE0,
    0xB9,
    0x92,
    0xE4,
    0xBF,
    0xB0,
    0xF0,
    0x90,
    0xA1,
    0x81,
    0xE2,
    0x84,
    0xB5,
    0xF0,
    0x9D,
    0x92,
    0x9C,
  ]);

  /// Bytes for UTF-16BE
  ///
  static final bytesUtf16be = Uint8List.fromList(<int>[
    0xFE,
    0xFF,
    0x00,
    0x41,
    0x00,
    0x62,
    0x00,
    0x63,
    0x04,
    0x10,
    0x04,
    0x31,
    0x04,
    0x32,
    0x04,
    0x33,
    0x10,
    0xC5,
    0x05,
    0x76,
    0x0E,
    0x52,
    0x4F,
    0xF0,
    0xD8,
    0x02,
    0xDC,
    0x41,
    0x21,
    0x35,
    0xD8,
    0x35,
    0xDC,
    0x9C,
  ]);

  /// Bytes for UTF-16LE
  ///
  static final bytesUtf16le = Uint8List.fromList(<int>[
    0xFF,
    0xFE,
    0x41,
    0x00,
    0x62,
    0x00,
    0x63,
    0x00,
    0x10,
    0x04,
    0x31,
    0x04,
    0x32,
    0x04,
    0x33,
    0x04,
    0xC5,
    0x10,
    0x76,
    0x05,
    0x52,
    0x0E,
    0xF0,
    0x4F,
    0x02,
    0xD8,
    0x41,
    0xDC,
    0x35,
    0x21,
    0x35,
    0xD8,
    0x9C,
    0xDC,
  ]);

  /// Bytes for UTF-32BE
  ///
  static final bytesUtf32be = Uint8List.fromList(<int>[
    0x00,
    0x00,
    0xFE,
    0xFF,
    0x00,
    0x00,
    0x00,
    0x41,
    0x00,
    0x00,
    0x00,
    0x62,
    0x00,
    0x00,
    0x00,
    0x63,
    0x00,
    0x00,
    0x04,
    0x10,
    0x00,
    0x00,
    0x04,
    0x31,
    0x00,
    0x00,
    0x04,
    0x32,
    0x00,
    0x00,
    0x04,
    0x33,
    0x00,
    0x00,
    0x10,
    0xC5,
    0x00,
    0x00,
    0x05,
    0x76,
    0x00,
    0x00,
    0x0E,
    0x52,
    0x00,
    0x00,
    0x4F,
    0xF0,
    0x00,
    0x01,
    0x08,
    0x41,
    0x00,
    0x00,
    0x21,
    0x35,
    0x00,
    0x01,
    0xD4,
    0x9C,
  ]);

  /// Bytes for UTF-32LE
  ///
  static final bytesUtf32le = Uint8List.fromList(<int>[
    0xFF,
    0xFE,
    0x00,
    0x00,
    0x41,
    0x00,
    0x00,
    0x00,
    0x62,
    0x00,
    0x00,
    0x00,
    0x63,
    0x00,
    0x00,
    0x00,
    0x10,
    0x04,
    0x00,
    0x00,
    0x31,
    0x04,
    0x00,
    0x00,
    0x32,
    0x04,
    0x00,
    0x00,
    0x33,
    0x04,
    0x00,
    0x00,
    0xC5,
    0x10,
    0x00,
    0x00,
    0x76,
    0x05,
    0x00,
    0x00,
    0x52,
    0x0E,
    0x00,
    0x00,
    0xF0,
    0x4F,
    0x00,
    0x00,
    0x41,
    0x08,
    0x01,
    0x00,
    0x35,
    0x21,
    0x00,
    0x00,
    0x9C,
    0xD4,
    0x01,
    0x00,
  ]);

  /// Source string
  ///
  static const complexStr = "AbcАбвгჅն๒俰𐡁ℵ𝒜";

  /// Dumps bytes as hex numbers
  ///
  static void dumpAsHex(UtfType type) {
    final complexBytes =
        UtfEncoderSink(id: null, type: type, withBom: true).convert(complexStr);
    print(complexBytes
        .map((x) =>
            '0x${(x < 0x10 ? '0' : '')}${x.toRadixString(0x10).toUpperCase()}, ')
        .join(''));
  }
}
